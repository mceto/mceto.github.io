<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HexoClient]]></title>
    <url>%2F2018%2F12%2F22%2Fhexoclient%2F</url>
    <content type="text"><![CDATA[添加了一个分类：word,做一个关键词分享。 本地整理了很多，大多数都是从别处摘抄的。。。就添加这个分类，根据一个关键词，记一些日常生活中比较实用的东西。 以后有原创的东西会第一时间发布在自己的博客上。第一个就分享一下前段时间发现的hexo客户端工具:HexoClient GitHub地址:https://github.com/gaoyoubo/hexo-client开发者博客:https://www.mspring.org/ 来看看客户端的样子吧 工具支持配置七牛云的图床，是不是很棒。]]></content>
      <categories>
        <category>word</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>word</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hive]]></title>
    <url>%2F2018%2F12%2F12%2Fhive%2F</url>
    <content type="text"><![CDATA[Hive 📋介绍：基于hadoop的数据仓库工具，通俗讲可以把结构化的文本文件映射成一张数据库表，并提供类SQL查询功能 🧠本质：将SQL转换为MapReduce程序 🚗用途：做离线数据分析 Hive SQL 推荐数据库连接工具：DBeaver,可以连接hadoop的hive数据库及各种数据库推荐书籍：《离线和实时大数据开发实战》 –朱松岭 Hive数据库创建数据库1234567--语法CREATE (DATABASE|SCHEMA) [ IF NOT EXISTS ] database_name [ COMMENT database_name ] [ LOCATION hdfs_path ] [ WITH DBPROPERTIES (Property_name=property value , ...) ];ex: create database demo; 显示所有数据库1show databases; 删除数据库1drop database demo; hive默认不允许删除含有表的数据库，若数据库中有表，则使用以下语句删数据库1drop database demo CASCADE 切换数据库1use demo; 查看数据库信息1discribe database demo; Hive表DDL创建表12345678CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name [(col_name data_type [COMMENT col_comment], ...)] --字段名,类型 [COMMENT table_comment] --字段描述 [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)] --分区，数据查询的时候速度更快 [CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS] --分桶,根据字段哈希取余数决定放在哪个桶中 [ROW FORMAT row_format] --分割符 [STORED AS file_format] --字段排序 [LOCATION hdfs_path] --HDFS地址 创建指定分隔符的内表(默认’\001’) 单一类型的表1create table demo (id int, name string ) row format delimited fields terminated by '||'; 表数据类型为：66||jerry77||tomas 复杂类型的表1123create table demo (name string, hobby array&lt;string&gt; ) row format delimited fields terminated by '\t' collection items terminated by '||'; 表数据类型为:​ jerry movie||game||music​ tomas movie||code||basketball 复杂类型的表21234create table demo (id int, name string, hobby_score map&lt;string, int&gt;) row format delimited fields terminated by '\t' collection items terminated by '||' map keys terminated by ':'; 表数据类型为：​ 66 jerry movie:5||game:5||music:4​ 77 tomas movie:4||game:5||basketball:3 创建外表1create external table demo_ext(id int, name string, hobby string) row format delimited fields terminated by '||'; 复制表(复制表结构，不复制数据) 12create table demo_copy like demo;` 修改表 修改表名 1alter table demo_old rename to demo_new; 修改表列名 1alter table demo change old_col new_col; 添加列名 1alter table demo add columns (newcol int comment '这是新列的描述') 删除表 删除表的数据和元数据 1drop table demo; 只删除表数据 1truncate table demo; 插入表数据 向表中加载数据 数据库：hive 本地日志文件路径：/usr/local/openresty/nginx/logs/toupload/user_defined.log.2018*HDFS路径：hdfs://user/hive/warehouse/hive.db/ 1234567&gt; --LOAD语法&gt; LOAD DATA &gt; [LOCAL] -- 若为本地路径加local,hdfs路径不加&gt; INPATH 'filepath' --文件路径&gt; [OVERWRITE] --是否覆盖&gt; INTO TABLE tablename [PARTITION(col=value,col_1=value_1...)]&gt; 12345&gt; --在hive数据库中中创建自定义分区ymd的表&gt; create table userlog (msec string,remote_addr string,status int,body_bytes_sent string,u_domain string,u_url string,u_title string,u_referrer string,u_sh string,u_sw string,u_cd string,u_lang string,http_user_agent string,u_account string,u_avalue string,u_type0 string,u_type1 string,u_type2 string) &gt; partitioned by (ymd string) &gt; row format delimited fields terminated by '||';&gt; –装载某一天的数据load data local inpath ‘/usr/local/openresty/nginx/logs/toupload/user_defined.log.20181209*’ into table userlog partition (ymd=’20181209’); 1234&gt; 若日志文件已经映射到HDFS上&gt; HDFS日志路径:hdfs://flume/tailout/18-12-09/```SQLload data inpath &apos;/flume/tailout/18-12-09/*&apos; into table userlog partition (ymd=&apos;20181209&apos;); 将查询结果插入到Hive表中(HDFS文件系统)12345--insert语法INSERT [INTO:OVERWRITE] --into:追加插入到表中。overwrite:覆盖表数据TABLE demoselect_statement... 123456789101112--创建结果表create table userlogresult(timesec string,ip string) partitioned by (ymd string) row format delimited fields terminated by '||';--开启动态分区set hive.exec.dynamic.partition=true;set hive.exec.dynamic.partition.mode=nonstrict;-- 将userlog表查询的结果插入到userlogresult表中insert overwrite table userlogresult partition (ymd)select mesec as timesec,remote_addr as ip,ymd from userlog; Hive表DML额…众所周知，表查询是最艰难的，下一章再单独做总结吧]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何利用Hexo、GitHub免费搭建属于自己的博客网站]]></title>
    <url>%2F2018%2F11%2F26%2Fhexo%2F</url>
    <content type="text"><![CDATA[👉👉👉GitHub👉👉👉Hexo👉👉👉Hexo食用指南👉👉👉next主题👉👉👉Valine 参观一下吧👉👉👉asdfv1929 👈👈👈👉👉👉morefox 👈👈👈👉👉👉shenzekun 👈👈👈 搭建Hexo博客​ 按照官方的文档其实已经可以把Hexo博客搭的差不多了，但第一次搭建的时候多多少少会碰到许多坑，我就把自己的搭建过程先写下来，这样我就可以查阅自己的笔记啦！ 安装好基本的软件git，确保本地有nodejs环境，不懂的可以搜索下，这个教程真的很多。 将GitHub上的Hexo源码下载下来 12//下载源码$ git clone https://github.com/hexojs/hexo 执行官方文档的命令 123456789101112131415161718192021//安装$ npm install hexo-cli -g//快速开始$ hexo init blog//进入blog目录$ cd blog//进入blog/node_modules目录下查看是否有以下目录:hexo-deployer-git,若没有输入指令,后面上传到GitHub时会用到该组件$ npm install hexo-deployer-git --save//启动服务 可以看到初始页面$ hexo server ==&gt; $ hexo s//创建新的文章$ hexo new &quot;Hello Hexo&quot; ==&gt; $ hexo n &quot;Hello Hexo&quot;//编译$ hexo generate ==&gt; $ hexo g//部署网站$ hexo deploy ==&gt; $ hexo d//清除文件$ hexo clean ==&gt; $ hexo c 修改启动端口为80端口 hexo s -p 80 ，可以暂时修改启动端口 修改_config.yml,添加以下配置(推荐) 12server: port: 80 修改hexo-server中的index.js,位置在blog/node_modules/hexo-server/index.js(不推荐) 使用主题(Next为例)同样是再blog目录下,别弄混了，blog目录下有个thems文件夹 1$ git clone https://github.com/theme-next/hexo-theme-next themes/next 修改_config.yml，搜索theme 12345678# 主题theme: next# 部署网站配置 (后面会用到)deploy: type: git repo: git@github.com:mceto/mceto.github.io.git branch: master 然后再$ hexo g $ hexo s 访问一下看看，是不是画风变的更漂亮了😄😄😄😄😄 上传部署到GitHub 首先得先创建一个仓库,由于GitHub Page每一个账号就只有一个，所以要想好给自己的博客起什么名字 如果需要配置自己的域名CNAME解析的话,进入仓库找到Settings-&gt;Options-&gt;GitHubPages 配置ssh key(坑有点多) 首先进如blog目录，还没安装Git的先把Git安装好，这个比cmd好用些，$ hexo d部署时最好使用Git Bash,我尝试过很多次使用cmd，都没部署成功 进入C:\Users\用户名\ .ssh 查看是否存在文件id_rsa.pub,有的话邮件文本打开复制里面所有的字符串 如果没有，打开Git Bash ,输入以下指令生成key文件 123cd ~/.sshssh-keygen -t rsa -C &quot;你的邮箱地址（GitHub地址）&quot;输入密码后就会生成key文件 添加ssh key到GitHub中 我这里使用的是仓库的ssh key 在Git Bash中输入$ hexo d 尝试部署博客，这样就差不多吧博客的雏形搭建好了， 可以访问一下自己的博客地址 https://mceto.github.io 如果配置了域名解析 https://blog.mceto.com 博客的评论系统​ 在这里我推荐大家可以去看看另外一位博主的博客文章，我的评论系统就是参考的他的完成的，内容详细 ​ 博客地址：https://11.tt/posts/2018/add-valine-to-your-blog/ 好了，今天花了一些时间把自己做博客的过程整理了一下，自己看起来还是挺乱的，有哪里不对或者有什么疑问的欢迎大家在下面留言，以后继续加油！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2018%2F11%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[​ 第一次写博客，标题也不知道该取什么名字，作为一个从事计算机行业的人，先国际惯例吧。 ​ 今天花了一上午的时间，总算是把这个博客的雏形弄了出来，期间参考了许多前辈的博客，着实遇到了不少的坑，但只要静下心来，问题还是可以解决的。 ​ 脑子里比较乱，有很多语言在脑子里翻滚，却不知道该写些什么好。 谈一谈写博客的好处吧 有助于理清思路，提高自己的思维能力 人不同于动物是因为人会思考，人的思维就像是绳，记忆就像是绳结，绳乱了，卷成一坨，就不好找到自己需要的那个绳结。 好记性不如烂笔头(敲键盘) 我自己最差的就是记性，鱼的记忆都能有7秒钟，而我可能连3秒都不到。 现在社会发展的如此飞速，我想除了在校的学生，很少有人会用笔了吧。我基本上每天都对着电脑，拿笔的日子早已不属于我，虽然我字写的确实挺难看的… en…还是键盘比较合适我。首先就不需要考虑的事情就是字迹怎么样了，其次就是以后查阅起来也相当方便，现在的编辑器基本上都带有文字查找功能，想要查阅什么也是非常方便的。 至于写作用的编辑器我用的是当下流行的Typora，用来写markdown文档再好不过了，虽然用这个并没有多久，不是很熟练，但是用的时间长了也会熟悉的。 记录自己所遇所感所知 就像是写日志一样，把自己所遇见的所看到的写到文档中，记录生活的点点滴滴，与他人分享。 展示自我 证明你来过这世上，在这个年代生活过。 虽然现在有很多社交平台，但我很少发说说、朋友圈，基本上就是用来聊天的。我也不知道为什么，反正就是不想发，然而却对博客有着很大的兴趣。 给以前做个总结​ 之前想做博客却没做成，自己懒占了很大一部分原因，担心自己做出来了却不能坚持下去之类的。前段时间想通了，写博客就像是做笔记，写备忘录，发说说，可以弥补自己的记性缺陷，博客不一定要时刻保持更新着，查看过很多大佬的博客，基本上都是隔三岔五的更新一次。 ​ 迈出了第一步，感觉挺好！ 写博客主要想干什么​ 我是计算机专业毕业的，写博客主要是想记录自己学习技术时的过程和所见的问题，就好比这个博客，我也是参考了很多前辈的博客才做了出来，期间自己也踩了很多坑，希望能给其他的人带来一点帮助。 就先写这么多了，博客还有很多需要完善的地方，慢慢来吧，第一天，仅仅是个开始！]]></content>
  </entry>
</search>
